
# Spring Boot Profile Service with Neo4J

This project provides a robust authentication and authorization system for a banking application, featuring JWT-based authentication, role-based access control (RBAC), and CRUD operations for users, roles, and permissions.

## Features

- **JWT-Based Authentication**: Issue JWT tokens and validate them for secure access via OAuth 2.0, allow to validate and refresh token if need.
- **Role-Based Access Control (RBAC)**: Manage roles and permissions for fine-grained access control using filter chain.
- **CRUD Operations**: Manage users, roles, and permissions.
- **Global Exception Handling**: Handles exceptions like `AccessDeniedException`, `AppException`, `MethodArgumentNotValidException`, and more.
- **Custom JWT Decoder**: A scalable JWT decoder that fits into Spring Securityâ€™s filter chain for JWT validation and authentication.

## Setup
Intialize Spring boot project with Spring Web, Lombok, Spring Data Neo4j and add ModelMapper

### 1. Create profile entity

Create Springboot project with ONLY lombok dependencies and modify the pom.xml

```.xml
.....
	<properties>
		.....
		<spring-cloud.version>2023.0.3</spring-cloud.version>
	</properties>
	<dependencies>
		......
        <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-gateway</artifactId>
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.netty</groupId>
			<artifactId>netty-resolver-dns-native-macos</artifactId>
			<version>4.1.114.Final</version> <!-- Match your current Netty version -->
			<classifier>osx-aarch_64</classifier> <!-- For ARM-based Macs (e.g., Apple Silicon) -->
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.modelmapper/modelmapper -->
		<dependency>
			<groupId>org.modelmapper</groupId>
			<artifactId>modelmapper</artifactId>
			<version>3.1.1</version>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		.....
	</build>

</project>

```

2. Setup application.properties and test

```.properties
spring.application.name=api-gateway
server.port=1234 
app.api-prefix=/api/v1
spring.cloud.gateway.routes[0].id=auth_service # Can be orther name doesn't need to match application name of Authentication Servic
spring.cloud.gateway.routes[0].uri=http://localhost:8080
spring.cloud.gateway.routes[0].predicates[0]=Path=${app.api-prefix}/auth-service/auth/**
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=2

spring.cloud.gateway.routes[1].id=profile_service
spring.cloud.gateway.routes[1].uri=http://localhost:8081
spring.cloud.gateway.routes[1].predicates[0]=Path=${app.api-prefix}/profile-service/**
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=2

spring.cloud.gateway.routes[2].id=users_service
spring.cloud.gateway.routes[2].uri=http://localhost:8080
spring.cloud.gateway.routes[2].predicates[0]=Path=${app.api-prefix}/auth-service/user/**
spring.cloud.gateway.routes[2].filters[0]=StripPrefix=2

```

